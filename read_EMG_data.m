%============================================================================
% Function name.: read_EMG_data
% Date..........: March 12, 2018
% Author........: Eric F Schmiele
%                 (eric.robotic@gmail.com)
% Description...:
%                 Reads a *.txt file generated by a MyosystemBr like
%                 equipment returns a struct with the data values, labels,
%                 sampling frequency and time vector.
%                    
% Parameters....: 
%                 file.....-> name of the file with EMG data to be read
%                             [*.txt or *.msf].
%                 msf......-> optional input: indicates if the file is from
%                             an *.msf file (0); if equal to 1, the data
%                             values will be in pure unit scale, without a
%                             header, considering all channels as EMG, and
%                             considering frequency as 10kHz.
%                             Default = 0.
%                 channels.-> vector with the positions that should be
%                             considered as valid channels. Only used in the
%                             case of a file generated from an *.msf file.
%
% Return........:
%                 emg_data.-> struct with the following fields:
%                             hdr.....-> complete information from the file
%                                        header;
%                             trial...-> matrix with the data values of each
%                                        channel;
%                             label...-> labels of each channel;
%                             fsample.-> sampling frequency [Hz];
%                             time....-> time vector [s].
%============================================================================

function emg_data = read_EMG_data(file, msf, channels)

%============================================================================
%% Manage inputs: First option:
if nargin == 1 || msf == 0 % pure txt file

    delimiter = '\t';
    headerlines = 300;
    %========================================================================
    %% Read the file
    try
        %read file now
        total_data = importdata(file, delimiter, headerlines);
        %some txt files may have decimal number with commas instead of point.
        %IF so, importdata will return an empty array.
        if isempty(total_data)
            %We'll try and replace ',' by '.' ==> Suppose txt files with data ONLY !!!    
            total_data = fileread(file);
            total_data = strrep(total_data, ',', '.');
            FID = fopen(file, 'w');
            fwrite(FID, total_data, 'char');
            fclose(FID);
            %read file now
            total_data = importdata(file, delimiter, headerlines);
        end
    catch
        ME = MException('MyComponent:filecouldnotberead', 'The file could not be read correctly.\nCheck the file name');
        throw(ME);
    end
    %========================================================================
    %% Header
    emg_data.hdr = total_data.textdata;
    %========================================================================
    %% Trial data
    emg_data.trial{1} = total_data.data;
    emg_data.trial{1}(end,:) = [];% remove last line (in some files it may not be complete)
    emg_data.trial{1} = emg_data.trial{1}';
    %========================================================================
    %% Labels
    emg_data.label = {};
    channelsLine = cell2mat(total_data.textdata(8,1));
    channelsLine_words = strsplit(channelsLine);
    for i = 5:length(channelsLine_words)
        aux = str2double(cell2mat(channelsLine_words(i)));
        if ~isnan(aux)
            if aux < 9
                emg_data.label{end + 1} = strcat('EMG', num2str(aux));
            else
                emg_data.label{end + 1} = strcat('AUX', num2str(aux - 8));
            end
        end
    end
    %========================================================================
    %% Sampling frequency
    freqLine = cell2mat(total_data.textdata(6,1));
    freqLine_words = strsplit(freqLine);
    emg_data.fsample = str2double(cell2mat(freqLine_words(8)));
    %========================================================================
    %% Time vector
    signal_size = length(emg_data.trial{1});
    emg_data.time = (0:signal_size - 1)/emg_data.fsample;
    %========================================================================
%============================================================================
%% Manage inputs: Second option:
else % txt file generated from an msf file
    %========================================================================
    %% Header
    emg_data.hdr = {};
    %========================================================================
    %% Trial data
    max_chan = 8; % default from MyosystemBr1
    f = fopen(file, 'r');
    data = fscanf(f, '%x');
    fclose(f);
    if mod(length(data), max_chan) ~= 0
        data(end-mod(length(data), 8)+1:end) = []; 
    end
    for i=1:(length(data)/max_chan)
        for j=1:max_chan
            organized_data(i,j)=data((i-1)*max_chan+j);
        end
    end
    emg_data.trial{1} = organized_data';
    %========================================================================
    %% Labels
    emg_data.label = {};
    for i = 1:max_chan
        emg_data.label{i} = strcat('EMG', num2str(i));
    end
    %========================================================================
    %% Sampling frequency
    emg_data.fsample = 10000; % default from MyosystemBr1
    %========================================================================
    %% Time vector
    signal_size = length(emg_data.trial{1});
    emg_data.time = (0:signal_size - 1)/emg_data.fsample;

    if nargin == 3
        emg_data.label = emg_data.label(channels);
        emg_data.trial{1} = emg_data.trial{1}(channels,:);
    end
    %========================================================================
end
%============================================================================

end